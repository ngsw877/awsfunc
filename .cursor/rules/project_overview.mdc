---
description: 
globs: 
alwaysApply: true
---
# awsfuncプロジェクト概要とAIアシスタントの役割

このプロジェクト（awsfunc）はGo言語で書かれたAWSリソース操作CLIツールです。ユーザーがコマンドラインから様々なAWSリソース（S3, ECR, CloudFormation, ECSなど）を管理・クリーンアップできることを目的としています。

## 技術スタック

- Go言語: v1.24.2
- AWS SDK for Go v2 (github.com/aws/aws-sdk-go-v2): 主要なAWSサービスのSDKを使用
- Cobra (github.com/spf13/cobra): コマンドラインインターフェースの実装

## ディレクトリ構成と役割

- `cmd/`: CLIコマンドのエントリーポイントとフラグ処理を担当（Cobraを使用）
  - `root.go`: ベースとなるコマンドとグローバルフラグを定義
  - `cleanup.go`: AWSリソースのクリーンアップコマンド
  - `ecs.go`: ECS関連のサブコマンド群
  - `s3.go`: S3バケット関連のサブコマンド
  - `cfn.go`: CloudFormation関連のサブコマンド
  - `version.go`: バージョン表示コマンド
  - ...

- `internal/`: AWS SDKを使用した実際のリソース操作ロジック
  - `cleanup.go`: S3バケットやECRリポジトリなどのクリーンアップロジック
  - `ecs.go`: ECSサービスやタスクの操作ロジック
  - `s3.go`: S3バケットの操作ロジック
  - `cfn.go`: CloudFormationスタックの操作ロジック
  - `utils.go`: AWS設定のロード等の共通ユーティリティ関数
  - ...

- `scripts/`: ビルドや開発用のスクリプト
- `main.go`: アプリケーションのエントリーポイント

## アーキテクチャパターン

このプロジェクトは以下のパターンに基づいて設計されています：

1. **コマンド層とロジック層の分離**
   - `cmd/`パッケージ: ユーザー入力の受け取りと検証のみを担当
   - `internal/`パッケージ: 実際のビジネスロジックを実装

2. **依存関係の方向**
   - `cmd/` → `internal/` の一方向の依存関係（`internal/`は`cmd/`に依存しない）

3. **エラーハンドリング**
   - 深い階層で発生したエラーは適切にラップして上位に伝播
   - ユーザーに表示するエラーは分かりやすいメッセージに変換

## Go言語のコーディング規約

- パッケージ外部に公開する必要がない変数・関数・型は**小文字**で始める（プライベート）
- パッケージ外部に公開する必要がある変数・関数・型は**大文字**で始める（パブリック）
- 略語（ID, ECSなど）を含む変数や関数名の命名では、頭文字のみを大文字にします（例: `taskId`、`GetEcsFromStack`）。
- エラーハンドリングは丁寧に行い、`fmt.Errorf`などを使って適切にエラー情報をラップ
- 複雑な関数には適切なコメントを付ける（ドキュメント生成のためにも重要）

## 主要な機能

1. **クリーンアップ機能**
   - 特定の文字列を含むS3バケットやECRリポジトリの一括削除
   - CloudFormationスタックからのリソース情報の抽出と削除

2. **ECS操作機能**
   - Fargateコンテナへのシェル接続
   - サービスの開始・停止
   - タスクの実行と監視

3. **S3・CloudFormation操作**
   - バケット一覧の取得
   - スタック情報の取得

## AIアシスタントへの指示

- ユーザーからの質問には、このプロジェクトの構造やGoの慣習を考慮して回答してください。
- 特に変数や関数の可視性（プライベート/パブリック）については、Go言語の規約に従った適切なアドバイスをしてください。
- AWSリソースの扱いについては、AWS CLIやSDKの最新の仕様も考慮に入れてください。
- コードの問題点や改善点を指摘する場合は、具体的な修正方法も提案してください。
- READMEやドキュメントの作成を支援する場合は、一般的なGo言語プロジェクトのベストプラクティスに従った内容を提案してください。

## 注意点・潜在的な問題

- CloudFormationスタックが完全に削除された後も、一定期間（90日間）はListStackResourcesでリソース情報が取得できる場合があります。
- バケット削除などでレート制限に達する可能性がある操作は、適切なバックオフとリトライロジックが必要かもしれません。
- ECSコンテナ接続には、AWS Session Managerプラグインがローカル環境にインストールされている必要があります。

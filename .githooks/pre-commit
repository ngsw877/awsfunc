#!/bin/bash

# Pre-commit hook: 
# 1. Cursor Rules が変更された場合に CLAUDE.md を自動更新
# 2. コマンド定義が変更された場合にドキュメントを自動更新
# 3. Goコードが変更された場合に自動フォーマット
# 4. .mcp.json 変更時に .cursor/mcp.json へ同期

# Cursor Rules ファイルが変更されているかチェック
if ! git diff --cached --quiet --exit-code -- .cursor/rules/; then
    echo "Cursor Rules files changed, updating CLAUDE.md..."
    
    # AI用ドキュメントを同期
    if ! make sync-ai-docs; then
        echo "Error: Failed to update CLAUDE.md"
        exit 1
    fi
    
    # CLAUDE.md が変更されていれば、ステージングエリアに追加
    if [ -f "CLAUDE.md" ]; then
        git add CLAUDE.md
        echo "CLAUDE.md has been updated and staged"
    fi
fi

# コマンド定義（cmd/配下）が変更されているかチェック
if ! git diff --cached --quiet --exit-code -- cmd/; then
    echo "Command definitions changed, updating documentation..."
    
    # ドキュメント生成
    if ! make docs; then
        echo "Error: Failed to generate documentation"
        exit 1
    fi
    
    # 生成されたドキュメントをステージングエリアに追加
    git add docs/
    echo "Documentation has been updated and staged"
fi

# MCP config sync (.mcp.json -> .cursor/mcp.json)
if ! git diff --cached --quiet --exit-code -- .mcp.json; then
    echo "MCP config changed, syncing to .cursor/mcp.json..."
    if ! make sync-mcp; then
        echo "Error: Failed to sync MCP config"
        exit 1
    fi
    if [ -f ".cursor/mcp.json" ]; then
        git add .cursor/mcp.json
        echo ".cursor/mcp.json has been updated and staged"
    fi
fi

# Goコードが変更されているかチェック
if ! git diff --cached --quiet --exit-code -- '*.go' go.mod go.sum; then
    echo "Go code changed, formatting..."
    
    # go fmt
    echo "Running go fmt..."
    go fmt ./...
    
    # golangci-lint --fix
    echo "Running golangci-lint --fix..."
    golangci-lint run --fix
    
    # 変更されたファイルを再度ステージング
    git add -u
    echo "Code has been formatted and staged"
fi

exit 0 